{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAmCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IA1CMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAgCC,EAAAF,EAAIG,cAAcC,SAA1CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAErB,GAAIF,EAAMG,MAAQ,GAAKF,EAAKE,MAAQ,GAAKD,EAAOC,MAAQ,EACtDvB,EAAAwB,OAAOC,QAAS,mCAAqC,CACjDC,SAAO,SAGX,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOC,MAAOI,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACbE,EAASC,OAAOV,EAAMG,OAASF,EAAKE,MAAQI,EAElDzB,EAAc0B,EAAUC,GACrBE,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBJ,EAAAwB,OAAOS,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,MAAK,CAC9DsB,SAAO,G,IAGZS,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBJ,EAAAwB,OAAOY,QAAQ,sBAAqCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,MAAK,CAC7DsB,SAAS,G,IAKnBX,EAAIG,cAAcmB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  const { delay, step, amount } = evt.currentTarget.elements;\n\n  if (delay.value < 0 || step.value < 0 || amount.value < 0) {\n    Notify.warning(`❗ Please enter a positive number`, {\n      useIcon: false,\n    });\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n            useIcon: false,\n          });\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n            useIcon: false,\n          });\n        });\n    }\n  }\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((fulfill, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        fulfill({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","fulfill","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","value","Notify","warning","useIcon","i","position1","delays","Number","then","param","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.6d147821.js.map"}